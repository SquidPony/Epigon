sourceCompatibility = 8
sourceSets.main.java.srcDirs = [ "src/main/java" ]
sourceSets.main.resources.srcDirs += ["src/main/resources"]

//project.ext.mainClassName = "squidpony.epigon.desktop.AStarProfile"
//project.ext.mainClassName = "squidpony.epigon.desktop.DijkstraPreProfile"
//project.ext.mainClassName = "squidpony.epigon.desktop.DijkstraProfile"
project.ext.mainClassName = "squidpony.epigon.desktop.DesktopLauncher"
project.ext.assetsDir = new File("assets")

if (!hasProperty('mainClass')) {
    //ext.mainClass = 'squidpony.epigon.desktop.DijkstraPreProfile'
    //ext.mainClass = 'squidpony.epigon.desktop.AStarProfile'
    //ext.mainClass = 'squidpony.epigon.desktop.DijkstraProfile'
    ext.mainClass = 'squidpony.epigon.desktop.DesktopLauncher'
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)
    //squidpony.squidgrid.FOV::shadowCast
//    jvmArgs += '-XX:+UnlockDiagnosticVMOptions'
//    jvmArgs += '-XX:+PrintInlining'
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    debug = true
    setIgnoreExitValue(true)
}

task dist(type: Jar) {
    from files(sourceSets.main.java.outputDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir)
    //archiveName "DijkstraArray-${version}.jar"
    //archiveName "Dijkstra-${version}.jar"
    //archiveName "DijkstraNext-${version}.jar"
    //archiveName "DijkstraPre-${version}.jar"
    //archiveName "AStar-${version}.jar"
    archiveName "Epigon-${version}.jar"
//    from { configurations.compile.collect { zipTree(it) } }
    manifest {
        attributes 'Main-Class': project.mainClassName
    }

}

dist.dependsOn classes

// creates application bundle (executable + runtime)
// relies on http://jdk.java.net/jpackage/ currently; will switch to OpenJDK 12 when it becomes available
//task javaPackager(type: Exec, dependsOn: dist) {
//    workingDir project.projectDir
//    def commands = [
//            'jpackage',
//            'create-image', 
//            '-i', "${buildDir}/libs",
//            '-f', "Epigon-${version}.jar",
//            '-o', "${buildDir}/distribution",
//            '-n', project.appName,
//            '-c', project.mainClassName,
//            '--force',
//            '-j', "Epigon-${version}.jar"
//    ]
//
//    def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
//    if (osName.contains('windows')) {
//        commands << '--icon'
//        commands << "${project.projectDir}/logo.ico"
//    } else if (osName.contains('linux')) {
//        commands << "--icon"
//        commands << "${project.projectDir}/logo.png"
//    } else if (osName.contains('mac')) {
//        commands << "--icon"
//        commands << "${project.projectDir}/logo.icns"
//        commands << '--jvm-args' 
//        commands << '-XstartOnFirstThread'
//    }
//
//    commandLine = commands
//}
//
//// removes bloated runtime created by javapackager
//task cleanPackagerRuntime(dependsOn: javaPackager) {
//    doLast() {
//        File runtimeFile = new File("${buildDir}/distribution/${project.appName}/runtime")
//        runtimeFile.deleteDir()
//        System.out.println("deleting bloated runtime in " + runtimeFile)
//    }
//}
//
//// creates a replacement runtime via jlink command (much smaller than jpackager)
//task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {
//    def jdk = System.getProperty("java.home")
//
//    workingDir project.projectDir
//    commandLine = [
//            'jlink',
//            '-p', "${jdk}/jmods",
//            '--add-modules', 'java.base,java.desktop,jdk.unsupported',
//            '--strip-debug',
//            '--no-header-files',
//            '--no-man-pages',
//            '--strip-native-commands',
//            "--vm=server",
//            "--compress=2",
//            '--output', "${buildDir}/distribution/${project.appName}/runtime"
//    ]
//
//    doLast{
//        System.out.println("Application '${project.appName}' packaged.")
//        System.out.println(" -> location: ${buildDir}/distribution/${project.appName}/")
//    }
//}
