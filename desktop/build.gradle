sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/main/java" ]
sourceSets.main.resources.srcDirs += ["src/main/resources"]

//project.ext.mainClassName = "squidpony.epigon.desktop.AStarProfile"
//project.ext.mainClassName = "squidpony.epigon.desktop.DijkstraPreProfile"
//project.ext.mainClassName = "squidpony.epigon.desktop.DijkstraProfile"
project.ext.mainClassName = "squidpony.epigon.desktop.DesktopLauncher"
project.ext.assetsDir = new File("assets")

if (!hasProperty('mainClass')) {
    //ext.mainClass = 'squidpony.epigon.desktop.DijkstraPreProfile'
    //ext.mainClass = 'squidpony.epigon.desktop.AStarProfile'
    //ext.mainClass = 'squidpony.epigon.desktop.DijkstraProfile'
    ext.mainClass = 'squidpony.epigon.desktop.DesktopLauncher'
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    debug = true
    setIgnoreExitValue(true)
}

task dist(type: Jar) {
    from files(sourceSets.main.java.outputDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir)
    //archiveName "DijkstraArray-${version}.jar"
    //archiveName "Dijkstra-${version}.jar"
    //archiveName "DijkstraNext-${version}.jar"
    //archiveName "DijkstraPre-${version}.jar"
    //archiveName "AStar-${version}.jar"
    archiveName "Epigon-${version}.jar"
//    from { configurations.compile.collect { zipTree(it) } }
    manifest {
        attributes 'Main-Class': project.mainClassName
    }

}

dist.dependsOn classes
