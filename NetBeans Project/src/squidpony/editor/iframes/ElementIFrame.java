package squidpony.editor.iframes;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import squidpony.data.DataMaster;
import squidpony.data.DataType;
import squidpony.data.EpiData;
import squidpony.data.generic.Element;
import squidpony.editor.DataEditor;

/**
 * This editor allows the creation of Elements.
 *
 * @author Eben Howard - http://squidpony.com - howard@squidpony.com
 */
public class ElementIFrame extends javax.swing.JInternalFrame implements DataEditor {

    private HashMap<String, Element> elements = new HashMap<>();
    private String newElement = "New Element";
    private DataMaster master;
    private Element editing;

    public ElementIFrame() {
        initComponents();
        updateList();

        epiDataPanel.saveChangesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (epiDataPanel.getInternalName() != null && !"".equals(epiDataPanel.getInternalName())) {
                    Element parent = "None".equals((String) parentComboBox.getSelectedItem()) ? null : elements.get((String) parentComboBox.getSelectedItem());
                    editing = new Element(parent, epiDataPanel.getInternalName(), epiDataPanel.getDataName(), epiDataPanel.getPluralName(),
                            epiDataPanel.getDescription(), epiDataPanel.getNotes(), epiDataPanel.getDataColor());
                    master.add(editing, DataType.ELEMENT);
                    loadData();//have to reload after adding an item
                }
            }
        });

        epiDataPanel.deleteEntryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (epiDataPanel.getInternalName() != null && !"".equals(epiDataPanel.getInternalName())) {
                    master.remove(epiDataPanel.getInternalName(), DataType.ELEMENT);
                    editing = null;
                    dataComboBox.setSelectedItem(null);
                    loadData();//have to reload after removing an item
                }
            }
        });
    }

    @Override
    public void setDataMaster(DataMaster master) {
        this.master = master;
    }

    @Override
    public void loadData() {
        if (master == null) {
            return;//can't load if there's no master
        }
        elements.clear();
        for (Object o : master.getList(DataType.ELEMENT)) {
            Element e = (Element) o;
            elements.put(e.getInternalName(), e);
        }
        updateList();
    }

    private void updateList() {
        dataComboBox.removeAllItems();
        String[] list = elements.keySet().toArray(new String[]{});
        Arrays.sort(list);
        dataComboBox.setModel(new DefaultComboBoxModel(list));
        dataComboBox.addItem(newElement);
        dataComboBox.setSelectedItem(editing == null ? newElement : editing.getInternalName());

        parentComboBox.removeAllItems();
        parentComboBox.setModel(new DefaultComboBoxModel(list));
        parentComboBox.addItem("None");
        fillInfo();
    }

    private void clear() {
        parentComboBox.setSelectedItem("None");
        epiDataPanel.setDataName("");
        epiDataPanel.setPluralName("");
        epiDataPanel.setInternalName("");
        epiDataPanel.setParentColor(null);
        epiDataPanel.setDataColor(null);
        epiDataPanel.setDescriptionArea("");
        epiDataPanel.setNote("");
    }

    private void fillInfo() {
        editing = elements.get((String) dataComboBox.getSelectedItem());
        if (editing == null) {
            clear();
        } else {
            parentComboBox.setSelectedItem(editing.getParent() == null ? "None" : editing.getParent().getInternalName());
            epiDataPanel.setInternalName(editing.getInternalName());
            epiDataPanel.setDataName(editing.isDataNameDefined() ? editing.getDataName() : "");
            epiDataPanel.setPluralName(editing.isPluralDefined() ? editing.getPlural() : "");
            epiDataPanel.setParentColor(editing.hasParent(null) ? editing.getParent().getColor() : null);
            epiDataPanel.setDataColor(editing.isColorDefined() ? editing.getColor() : null);
            epiDataPanel.setDescriptionArea(editing.isDescriptionDefined() ? editing.getDescription() : "");
            epiDataPanel.setNote(editing.isNotesDefined() ? editing.getNotes() : "");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        epiDataPanel = new squidpony.editor.iframes.EpiDataPanel();
        dataComboBox = new javax.swing.JComboBox();
        parentComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Elements");

        dataComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "New Element" }));
        dataComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataComboBoxActionPerformed(evt);
            }
        });

        parentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));

        jLabel1.setText("Parent:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(epiDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(11, 11, 11)
                        .addComponent(parentComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(dataComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dataComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(parentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(epiDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataComboBoxActionPerformed
        if (dataComboBox.getSelectedItem() != null) {
            if (dataComboBox.getSelectedItem() == newElement) {
                editing = null;
                clear();
            } else {
                editing = elements.get((String) dataComboBox.getSelectedItem());
                loadData();
            }
        }
    }//GEN-LAST:event_dataComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dataComboBox;
    private squidpony.editor.iframes.EpiDataPanel epiDataPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox parentComboBox;
    // End of variables declaration//GEN-END:variables
}
